{"ast":null,"code":"import * as React from 'react';\nimport { useEffect, useState } from 'react';\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nfunction useLoadScript(src, onLoad, onError) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector(\"script[src=\\\"\".concat(src, \"\\\"]\"));\n    // Call onLoad if script marked as loaded.\n    if (foundScript === null || foundScript === void 0 ? void 0 : foundScript.dataset.loaded) {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n      return;\n    }\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n    };\n    script.addEventListener(\"load\", onLoadWithMarker);\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nfunction useLoadGoogleCharts(param) {\n  let {\n    chartVersion = \"current\",\n    chartPackages = [\"corechart\", \"controls\"],\n    chartLanguage = \"en\",\n    mapsApiKey\n  } = param;\n  const [googleCharts, setGoogleCharts] = useState(null);\n  const [failed, setFailed] = useState(false);\n  useLoadScript(\"https://www.gstatic.com/charts/loader.js\", () => {\n    // @ts-expect-error Getting object from global namespace.\n    const google = window === null || window === void 0 ? void 0 : window.google;\n    if (!google) {\n      return;\n    }\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey\n    });\n    google.charts.setOnLoadCallback(() => {\n      setGoogleCharts(google);\n    });\n  }, () => {\n    setFailed(true);\n  });\n  return [googleCharts, failed];\n}\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nfunction LoadGoogleCharts(param) {\n  let {\n    onLoad,\n    onError,\n    ...params\n  } = param;\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n  return null;\n}\nconst chartDefaultProps = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1\n  },\n  rootProps: {},\n  chartWrapperParams: {}\n};\nlet uniqueID = 0;\nconst generateUniqueID = () => {\n  uniqueID += 1;\n  return \"reactgooglegraph-\".concat(uniqueID);\n};\nconst DEFAULT_CHART_COLORS = [\"#3366CC\", \"#DC3912\", \"#FF9900\", \"#109618\", \"#990099\", \"#3B3EAC\", \"#0099C6\", \"#DD4477\", \"#66AA00\", \"#B82E2E\", \"#316395\", \"#994499\", \"#22AA99\", \"#AAAA11\", \"#6633CC\", \"#E67300\", \"#8B0707\", \"#329262\", \"#5574A6\", \"#3B3EAC\"];\nconst loadDataTableFromSpreadSheet = async function (googleViz, spreadSheetUrl) {\n  let urlParams = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n  return new Promise((resolve, reject) => {\n    const headers = \"\".concat(urlParams.headers ? \"headers=\".concat(urlParams.headers) : \"headers=0\");\n    const queryString = \"\".concat(urlParams.query ? \"&tq=\".concat(encodeURIComponent(urlParams.query)) : \"\");\n    const gid = \"\".concat(urlParams.gid ? \"&gid=\".concat(urlParams.gid) : \"\");\n    const sheet = \"\".concat(urlParams.sheet ? \"&sheet=\".concat(urlParams.sheet) : \"\");\n    const access_token = \"\".concat(urlParams.access_token ? \"&access_token=\".concat(urlParams.access_token) : \"\");\n    const urlQueryString = \"\".concat(headers).concat(gid).concat(sheet).concat(queryString).concat(access_token);\n    const urlToSpreadSheet = \"\".concat(spreadSheetUrl, \"/gviz/tq?\").concat(urlQueryString); //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send(response => {\n      if (response.isError()) {\n        reject(\"Error in query:  \".concat(response.getMessage(), \" \").concat(response.getDetailedMessage()));\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\nconst {\n  Provider,\n  Consumer\n} = /*#__PURE__*/React.createContext(chartDefaultProps);\nconst ContextProvider = param => {\n  let {\n    children,\n    value\n  } = param;\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: value\n  }, children);\n};\nconst ContextConsumer = param => {\n  let {\n    render\n  } = param;\n  return /*#__PURE__*/React.createElement(Consumer, null, context => {\n    return render(context);\n  });\n};\nconst GRAY_COLOR = \"#CCCCCC\";\nclass GoogleChartDataTableInner extends React.Component {\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n  componentWillUnmount() {\n    const {\n      google,\n      googleChartWrapper\n    } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n    }\n  }\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n  constructor() {\n    super(...arguments);\n    this.state = {\n      hiddenColumns: []\n    };\n    this.listenToLegendToggle = () => {\n      const {\n        google,\n        googleChartWrapper\n      } = this.props;\n      google.visualization.events.addListener(googleChartWrapper, \"select\", () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (selection.length === 0 ||\n        // We want to listen to when a whole row is selected. This is the case only when row === null\n        selection[0].row || !dataTable) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState(state => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns.filter(colID => colID !== columnID)]\n          }));\n        } else {\n          this.setState(state => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID]\n          }));\n        }\n      });\n    };\n    this.applyFormatters = (dataTable, formatters) => {\n      const {\n        google\n      } = this.props;\n      for (let formatter of formatters) {\n        switch (formatter.type) {\n          case \"ArrowFormat\":\n            {\n              const vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n          case \"BarFormat\":\n            {\n              const vizFormatter = new google.visualization.BarFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n          case \"ColorFormat\":\n            {\n              const vizFormatter = new google.visualization.ColorFormat(formatter.options);\n              const {\n                ranges\n              } = formatter;\n              for (let range of ranges) {\n                vizFormatter.addRange(...range);\n              }\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n          case \"DateFormat\":\n            {\n              const vizFormatter = new google.visualization.DateFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n          case \"NumberFormat\":\n            {\n              const vizFormatter = new google.visualization.NumberFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n          case \"PatternFormat\":\n            {\n              const vizFormatter = new google.visualization.PatternFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n        }\n      }\n    };\n    this.getColumnID = (dataTable, columnIndex) => {\n      return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n    };\n    this.draw = async param => {\n      let {\n        data,\n        diffdata,\n        rows,\n        columns,\n        options,\n        legend_toggle,\n        legendToggle,\n        chartType,\n        formatters,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      } = param;\n      const {\n        google,\n        googleChartWrapper\n      } = this.props;\n      let dataTable;\n      let chartDiff = null;\n      if (diffdata) {\n        const oldData = google.visualization.arrayToDataTable(diffdata.old);\n        const newData = google.visualization.arrayToDataTable(diffdata.new);\n        chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n      }\n      if (data !== null) {\n        if (Array.isArray(data)) {\n          dataTable = google.visualization.arrayToDataTable(data);\n        } else {\n          dataTable = new google.visualization.DataTable(data);\n        }\n      } else if (rows && columns) {\n        dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n      } else if (spreadSheetUrl) {\n        dataTable = await loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n      } else {\n        dataTable = google.visualization.arrayToDataTable([]);\n      }\n      const columnCount = dataTable.getNumberOfColumns();\n      for (let i = 0; i < columnCount; i += 1) {\n        const columnID = this.getColumnID(dataTable, i);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          const previousColumnLabel = dataTable.getColumnLabel(i);\n          const previousColumnID = dataTable.getColumnId(i);\n          const previousColumnType = dataTable.getColumnType(i);\n          dataTable.removeColumn(i);\n          dataTable.addColumn({\n            label: previousColumnLabel,\n            id: previousColumnID,\n            type: previousColumnType\n          });\n        }\n      }\n      const chart = googleChartWrapper.getChart();\n      if (googleChartWrapper.getChartType() === \"Timeline\") {\n        chart && chart.clearChart();\n      }\n      googleChartWrapper.setChartType(chartType);\n      googleChartWrapper.setOptions(options || {});\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n      if (this.props.googleChartDashboard !== null) {\n        this.props.googleChartDashboard.draw(dataTable);\n      }\n      if (chartDiff) {\n        googleChartWrapper.setDataTable(chartDiff);\n        googleChartWrapper.draw();\n      }\n      if (formatters) {\n        this.applyFormatters(dataTable, formatters);\n        googleChartWrapper.setDataTable(dataTable);\n        googleChartWrapper.draw();\n      }\n      if (legendToggle === true || legend_toggle === true) {\n        this.grayOutHiddenColumns({\n          options\n        });\n      }\n      return;\n    };\n    this.grayOutHiddenColumns = param => {\n      let {\n        options\n      } = param;\n      const {\n        googleChartWrapper\n      } = this.props;\n      const dataTable = googleChartWrapper.getDataTable();\n      if (!dataTable) return;\n      const columnCount = dataTable.getNumberOfColumns();\n      const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n      if (hasAHiddenColumn === false) return;\n      const colors = Array.from({\n        length: columnCount - 1\n      }).map((dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      });\n      googleChartWrapper.setOptions({\n        ...options,\n        colors\n      });\n      googleChartWrapper.draw();\n    };\n    this.onResize = () => {\n      const {\n        googleChartWrapper\n      } = this.props;\n      googleChartWrapper.draw();\n    };\n  }\n}\nclass GoogleChartDataTable extends React.Component {\n  componentDidMount() {}\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const {\n      google,\n      googleChartWrapper,\n      googleChartDashboard\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ContextConsumer, {\n      render: props => {\n        return /*#__PURE__*/React.createElement(GoogleChartDataTableInner, Object.assign({}, props, {\n          google: google,\n          googleChartWrapper: googleChartWrapper,\n          googleChartDashboard: googleChartDashboard\n        }));\n      }\n    });\n  }\n}\nclass GoogleChartEvents extends React.Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents(param) {\n    let {\n      chartEvents,\n      google,\n      googleChartWrapper\n    } = param;\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      var _this = this;\n      const {\n        eventName,\n        callback\n      } = event;\n      google.visualization.events.addListener(googleChartWrapper, eventName, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        callback({\n          chartWrapper: googleChartWrapper,\n          props: _this.props,\n          google: google,\n          eventArgs: args\n        });\n      });\n    }\n  }\n  render() {\n    const {\n      google,\n      googleChartWrapper\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ContextConsumer, {\n      render: propsFromContext => {\n        this.listenToEvents({\n          chartEvents: propsFromContext.chartEvents || null,\n          google,\n          googleChartWrapper\n        });\n        return null;\n      }\n    });\n  }\n}\nlet controlCounter = 0;\nclass GoogleChart extends React.Component {\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper\n    } = this.props;\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(chartConfig);\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(this.dashboard_ref);\n    const googleChartControls = this.addControls(googleChartWrapper, googleChartDashboard);\n    if (toolbarItems) {\n      google.visualization.drawToolbar(this.toolbar_ref.current, toolbarItems);\n    }\n    let googleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google\n      });\n    }\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n    const {\n      controls\n    } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const {\n          controlType,\n          options,\n          controlWrapperParams\n        } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.isReady !== nextState.isReady || nextProps.controls !== this.props.controls;\n  }\n  render() {\n    const {\n      width,\n      height,\n      options,\n      style\n    } = this.props;\n    const divStyle = {\n      height: height || options && options.height,\n      width: width || options && options.width,\n      ...style\n    };\n    if (this.props.render) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.dashboard_ref,\n        style: divStyle\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.toolbar_ref,\n        id: \"toolbar\"\n      }), this.props.render({\n        renderChart: this.renderChart,\n        renderControl: this.renderControl,\n        renderToolbar: this.renderToolBar\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.dashboard_ref,\n        style: divStyle\n      }, this.renderControl(param => {\n        let {\n          controlProp\n        } = param;\n        return controlProp.controlPosition !== \"bottom\";\n      }), this.renderChart(), this.renderControl(param => {\n        let {\n          controlProp\n        } = param;\n        return controlProp.controlPosition === \"bottom\";\n      }), this.renderToolBar());\n    }\n  }\n  constructor() {\n    for (var _len2 = arguments.length, args1 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args1[_key2] = arguments[_key2];\n    }\n    var _this1;\n    super(), _this1 = this;\n    this.state = {\n      googleChartWrapper: null,\n      googleChartDashboard: null,\n      googleChartControls: null,\n      googleChartEditor: null,\n      isReady: false\n    };\n    this.graphID = null;\n    this.dashboard_ref = /*#__PURE__*/React.createRef();\n    this.toolbar_ref = /*#__PURE__*/React.createRef();\n    this.getGraphID = () => {\n      const {\n        graphID,\n        graph_id\n      } = this.props;\n      let instanceGraphID;\n      if (!graphID && !graph_id) {\n        if (!this.graphID) {\n          instanceGraphID = generateUniqueID();\n        } else {\n          instanceGraphID = this.graphID;\n        }\n      } else if (graphID && !graph_id) {\n        instanceGraphID = graphID;\n      } else if (graph_id && !graphID) {\n        instanceGraphID = graph_id;\n      } else {\n        instanceGraphID = graphID;\n      }\n      this.graphID = instanceGraphID;\n      return this.graphID;\n    };\n    this.getControlID = (id, index) => {\n      controlCounter += 1;\n      let controlID;\n      if (typeof id === \"undefined\") {\n        controlID = \"googlechart-control-\".concat(index, \"-\").concat(controlCounter);\n      } else {\n        controlID = id;\n      }\n      return controlID;\n    };\n    this.addControls = (googleChartWrapper, googleChartDashboard) => {\n      const {\n        google,\n        controls\n      } = this.props;\n      const googleChartControls = !controls ? null : controls.map((control, i) => {\n        const {\n          controlID: controlIDMaybe,\n          controlType,\n          options: controlOptions,\n          controlWrapperParams\n        } = control;\n        const controlID = this.getControlID(controlIDMaybe, i);\n        return {\n          controlProp: control,\n          control: new google.visualization.ControlWrapper({\n            containerId: controlID,\n            controlType,\n            options: controlOptions,\n            ...controlWrapperParams\n          })\n        };\n      });\n      if (!googleChartControls) {\n        return null;\n      }\n      googleChartDashboard.bind(googleChartControls.map(param => {\n        let {\n          control\n        } = param;\n        return control;\n      }), googleChartWrapper);\n      for (let chartControl of googleChartControls) {\n        const {\n          control,\n          controlProp\n        } = chartControl;\n        const {\n          controlEvents = []\n        } = controlProp;\n        for (let event of controlEvents) {\n          var _this = this;\n          const {\n            callback,\n            eventName\n          } = event;\n          google.visualization.events.removeListener(control, eventName, callback);\n          google.visualization.events.addListener(control, eventName, function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: _this.props,\n              google: google,\n              eventArgs: args\n            });\n          });\n        }\n      }\n      return googleChartControls;\n    };\n    this.renderChart = () => {\n      const {\n        width,\n        height,\n        options,\n        style,\n        className,\n        rootProps,\n        google\n      } = this.props;\n      const divStyle = {\n        height: height || options && options.height,\n        width: width || options && options.width,\n        ...style\n      };\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        id: this.getGraphID(),\n        style: divStyle,\n        className: className\n      }, rootProps), this.state.isReady && this.state.googleChartWrapper !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GoogleChartDataTable, {\n        googleChartWrapper: this.state.googleChartWrapper,\n        google: google,\n        googleChartDashboard: this.state.googleChartDashboard\n      }), /*#__PURE__*/React.createElement(GoogleChartEvents, {\n        googleChartWrapper: this.state.googleChartWrapper,\n        google: google\n      })) : null);\n    };\n    this.renderControl = function () {\n      let filter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : param => {\n        return true;\n      };\n      return _this1.state.isReady && _this1.state.googleChartControls !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, _this1.state.googleChartControls.filter(param => {\n        let {\n          controlProp,\n          control\n        } = param;\n        return filter({\n          control,\n          controlProp\n        });\n      }).map(param => {\n        let {\n          control,\n          controlProp\n        } = param;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: control.getContainerId(),\n          id: control.getContainerId()\n        });\n      })) : null;\n    };\n    this.renderToolBar = () => {\n      if (!this.props.toolbarItems) return null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.toolbar_ref\n      });\n    };\n  }\n}\nclass Chart$1 extends React.Component {\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ContextProvider, {\n      value: this.props\n    }, this.state.loadingStatus === \"ready\" && this.state.google !== null ? /*#__PURE__*/React.createElement(GoogleChart, Object.assign({}, this.props, {\n      google: this.state.google\n    })) : this.state.loadingStatus === \"errored\" && errorElement ? errorElement : loader, /*#__PURE__*/React.createElement(LoadGoogleCharts, {\n      chartLanguage: chartLanguage,\n      chartPackages: chartPackages,\n      chartVersion: chartVersion,\n      mapsApiKey: mapsApiKey,\n      onLoad: this.onLoad,\n      onError: this.onError\n    }));\n  }\n  componentDidMount() {\n    this._isMounted = true;\n  }\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n  isFullyLoaded(google) {\n    const {\n      controls,\n      toolbarItems,\n      getChartEditor\n    } = this.props;\n    return google && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n  }\n  constructor() {\n    super(...arguments);\n    this._isMounted = false;\n    this.state = {\n      loadingStatus: \"loading\",\n      google: null\n    };\n    this.onLoad = google1 => {\n      if (this.props.onLoad) {\n        this.props.onLoad(google1);\n      }\n      if (this.isFullyLoaded(google1)) {\n        this.onSuccess(google1);\n      } else {\n        // IE11: window.google is not fully set, we have to wait\n        const id = setInterval(() => {\n          const google = window.google;\n          if (this._isMounted) {\n            if (google && this.isFullyLoaded(google)) {\n              clearInterval(id);\n              this.onSuccess(google);\n            }\n          } else {\n            clearInterval(id);\n          }\n        }, 1000);\n      }\n    };\n    this.onSuccess = google => {\n      this.setState({\n        loadingStatus: \"ready\",\n        google\n      });\n    };\n    this.onError = () => {\n      this.setState({\n        loadingStatus: \"errored\"\n      });\n    };\n  }\n}\nChart$1.defaultProps = chartDefaultProps;\nvar GoogleDataTableColumnRoleType;\n(function (GoogleDataTableColumnRoleType) {\n  GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n  GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n  GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n  GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n  GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n  GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n  GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n  GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n  GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\nvar Chart = Chart$1;\nexport { Chart$1 as Chart, GoogleDataTableColumnRoleType, Chart as default };","map":{"version":3,"names":["useLoadScript","src","onLoad","onError","useEffect","document","foundScript","querySelector","concat","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","useLoadGoogleCharts","param","chartVersion","chartPackages","chartLanguage","mapsApiKey","googleCharts","setGoogleCharts","useState","failed","setFailed","google","window","charts","load","packages","language","setOnLoadCallback","LoadGoogleCharts","params","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","uniqueID","generateUniqueID","DEFAULT_CHART_COLORS","loadDataTableFromSpreadSheet","googleViz","spreadSheetUrl","urlParams","arguments","length","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","visualization","Query","send","response","isError","getMessage","getDetailedMessage","getDataTable","Provider","Consumer","React","createContext","ContextProvider","children","value","ContextConsumer","render","context","GRAY_COLOR","GoogleChartDataTableInner","Component","componentDidMount","draw","props","onResize","listenToLegendToggle","componentWillUnmount","googleChartWrapper","events","removeAllListeners","getChartType","getChart","clearChart","componentDidUpdate","state","hiddenColumns","addListener","chart","selection","getSelection","dataTable","row","columnIndex","column","columnID","getColumnID","includes","setState","filter","colID","applyFormatters","formatters","formatter","type","vizFormatter","ArrowFormat","format","BarFormat","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","data","diffdata","rows","columns","chartType","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","Array","isArray","DataTable","columnCount","getNumberOfColumns","i","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","label","id","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","hasAHiddenColumn","colors","from","map","dontcare","GoogleChartDataTable","shouldComponentUpdate","Object","assign","GoogleChartEvents","listenToEvents","chartEvents","event","eventName","callback","args","_len","_key","chartWrapper","_this","eventArgs","propsFromContext","controlCounter","GoogleChart","toolbarItems","getChartEditor","chartConfig","containerId","getGraphID","ChartWrapper","Dashboard","dashboard_ref","googleChartControls","addControls","drawToolbar","toolbar_ref","current","googleChartEditor","ChartEditor","chartEditor","isReady","controls","controlType","controlWrapperParams","control","setControlType","nextProps","nextState","width","height","style","divStyle","ref","renderChart","renderControl","renderToolbar","renderToolBar","controlProp","controlPosition","graphID","createRef","graph_id","instanceGraphID","getControlID","index","controlID","controlIDMaybe","controlOptions","ControlWrapper","bind","chartControl","controlEvents","removeListener","controlWrapper","className","Fragment","_this1","key","getContainerId","Chart$1","loader","errorElement","loadingStatus","_isMounted","isFullyLoaded","google1","onSuccess","setInterval","clearInterval","defaultProps","GoogleDataTableColumnRoleType","Chart"],"sources":["C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\hooks\\useLoadScript.ts","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\hooks\\useLoadGoogleCharts.ts","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\default-props.ts","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\generate-unique-id.ts","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\constants.ts","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\load-data-table-from-spreadsheet.ts","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\Context.tsx","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\components\\GoogleChartDataTable.tsx","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\components\\GoogleChartEvents.tsx","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\components\\GoogleChart.tsx","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\ReactGoogleCharts.tsx","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\types.ts","C:\\Users\\arist\\OneDrive\\Área de Trabalho\\Pedidos\\Web\\pedidos\\node_modules\\react-google-charts\\src\\index.tsx"],"sourcesContent":["import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.listenToEvents({\n            chartEvents: propsFromContext.chartEvents || null,\n            google,\n            googleChartWrapper,\n          });\n          return null;\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n","import { Chart } from \"./ReactGoogleCharts\";\n\nexport * from \"./types\";\nexport { Chart };\nexport default Chart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}